%{
#include "hpp.hpp"
Sym module("module",MODULE);		/* translation unit */
%}
%defines %union { Sym*o; }			/* AST: symbolic type parse tree		*/

%token <o> SYM NUM STR				/* scalar: symbol number 'string'		*/
%token <o> LB RB LQ RQ LC RC		/* bracket: ( ) [ ] { }					*/
%token <o> EQ AT TILD COLON PERC	/* operator: = @ ~ : %					*/
%token <o> ADD SUB MUL DIV POW		/* operator: + - * / ^					*/
%type <o> ex scalar list lambda		/* expression scalar [list] {lambda}	*/

%left EQ
%left AT
%left COLON
%left ADD
%left DIV
%%
REPL	: | REPL ex			{ module.push($2); } ;
scalar	: SYM | STR ;
ex		: scalar
		| LB ex RB			{ $$=$2; }
		| LQ list RQ		{ $$=$2; }
		| LC lambda RC		{ $$=$2; }
		| ex EQ ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex AT ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex ADD ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex DIV ex			{ $$=$2; $$->push($1); $$->push($3); }
;
list	: 					{ $$=new List(); }
	 	| list ex			{ $$=$1; $$->push($2); }
;
lambda	: 					{ $$=new Lambda(); }
		| lambda SYM COLON	{ $$=$1; $$->env->par($2); }
	 	| lambda ex			{ $$=$1; $$->push($2); }
;
%%
