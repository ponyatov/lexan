%{
#include "hpp.hpp"
string LexString;											// string buffer
%}
%option noyywrap
%option yylineno
							/* extra lexer states: string/docstring parsing */
%x lexstring docstring
%%
#[^\n]*				{}								/* line comment */

^\.end				{yyterminate();}					/* .end */

														/* string parser */
'					{BEGIN(lexstring); LexString="";}
<lexstring>'		{BEGIN(INITIAL); yylval.o = new Str(LexString); return STR;}
<lexstring>.		{LexString+=yytext[0];}

[a-zA-Z0-9_.]+		TOC(Sym,SYM)					/* symbol */

\(					TOC(Op,LB)
\)					TOC(Op,RB)
\[					TOC(Op,LQ)
\]					TOC(Op,RQ)
\{					TOC(Op,LC)
\}					TOC(Op,RC)

\=					TOC(Op,EQ)
\@					TOC(Op,AT)
\:					TOC(Op,COLON)

\+					TOC(Op,ADD)
\/					TOC(Op,DIV)

[ \t\r\n]	{}

%%
